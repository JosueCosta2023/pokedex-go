Estrutura de dados

Dados tela Principal
    nome do pokemon => obter no link principal da api => navegação array simples
    id do pokemon => obter no link principal e utilizar na navegação para details => navegação array simples
    imagem do pokemon => obter atraves do promisseAll e buscar imagem gif => navegação array complexa

Dados tela de Detalhes
    Nome do pokemon => navegação array simples
    Id do pokemon => navegação array simples
    Imagem do pokemon => navegação array simples
    tipos do pokemon => navegação array simples
    Tamanho do pokemon => navegação array simples
    Altura do pokemon => navegação array simples
    Os três pricipais movimentos => => navegação array simples, limitar o loop em 3
    Tres status especificos, xp, hp e atack => navegação simples
    As Habilidades => navegação link complexa => limitar o loop em 3,  defina um tamanho maximo de caracteres em 255 para cada resposta

aplicar skeleton


// export async function getPokemons() {
//     try {
//         const response = await axios.get(`https://pokeapi.co/api/v2/pokemon/?limit=10&offset=0`)
//         const promises = response.data.results.map(async (pokemon) => {
//             const res = await axios.get(pokemon.url)
//             return res.data
//         })
//         return await Promise.all(promises)


//     } catch (error) {
//         console.error("Erro ao buscar dados inicais do pokemon.", error)
//     }
// }


// export async function getPokemonsForTypes(selectedType){
//     try {
//         const response = await axios.get(`https://pokeapi.co/api/v2/type/${selectedType}`)
//         const promise = response.data.pokemon.map(async (pokemon) => {
//             const res = await axios.get(pokemon.pokemon.url)
//             return res.data
//         }) 
//         return await Promise.all(promise)
//     } catch (error) {
//         console.error("Erro ao buscar oss pokemons por tipo", error)
//     }
// }

    // useEffect(() => {

    //     const fetchPokemons = async () => {
    //         try {
    //             const response = await getPokemons()
    //             setPokemons(response)
    //         } catch (error) {
    //             console.error("Erro ao buscar dados inicais do pokemon.", error)
    //         }
    //     }
    //     fetchPokemons()
    // }, [])

    export async function getTypesPokemons() {
    try {
        const response = await axios.get('https://pokeapi.co/api/v2/type')
        const types = await Promise.all(response.data.results.map(async (type) => {
            try {
                const response = await axios(type.url)
                return response
            } catch (error) {
                console.error(`Erro ao pegar tipo ${type.name}`, error)
            }
        }))

        const typesF = types.map(type => {
            return type.data
        })

        const typesFilters = typesF.filter(
            (typePokemon) => typePokemon.pokemon.length > 0
        )

        return typesFilters

    } catch (error) {
        console.error("Erro ao buscar os tipos de pokemons", error)
    }
}


.container-header .header-navigation{
    width: 100%;
    margin-bottom: 24px;
}

.container-header .header-navigation form{
    display: flex;
    align-items: center;
    justify-content: right;
    gap: 10px;
    width: 100%;
    padding: 0 20px;
}

.container-header .header-navigation form select{
    width: 100px;
    height: 32px;
    border-radius: 16px;
    font-size: 10px;
    color: #666666;
    appearance: none;
    text-transform: capitalize;
    text-align: center;
}

.container-header .header-navigation form select option{
    text-transform: uppercase;
    letter-spacing: 2px;
}

.container-header .header-navigation form button{
    height: 32px;
    border-radius: 16px;
    font-size: 10px;
    background-color: #fff;
    padding: 0 16px;
}